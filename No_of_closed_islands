Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.
Return the number of closed islands.

class Solution {
    public int closedIsland(int[][] grid) {
        int m=grid.length; //rows
        int n=grid[0].length; //col

        for(int i=0;i<m;i++)
        {
            dfs(grid,i,0); //left border
            dfs(grid,i,n-1); //right border
        }

        for(int j=0;j<n;j++)
        {
            dfs(grid,0,j); //up border
            dfs(grid,m-1,j); //down
        }

        int c=0;
        for(int i=1;i<m-1;i++)
        {
            for(int j=1;j<n-1;j++)
            {
                if(grid[i][j]==0)
                {
                    dfs(grid,i,j);
                    c++;
                }
            }
        }
        return c;
    }
    public static void dfs(int[][] grid,int i,int j)
    {
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]!=0)
        {
            return;
        }
        grid[i][j]=1;

        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}
